using Normal.Realtime;
using Normal.Realtime.Serialization;


[RealtimeModel]
public partial class HandSyncRealtimeModel
{
    [RealtimeProperty(1, true)] private bool _isHandTrackingActive;
    
    [RealtimeProperty(2, false)] private bool _isRightHandTrackingReliable;

    [RealtimeProperty(3, false)] private bool _isLeftHandTrackingReliable;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class HandSyncRealtimeModel : RealtimeModel {
    public bool isRightHandTrackingReliable {
        get {
            return _isRightHandTrackingReliableProperty.value;
        }
        set {
            if (_isRightHandTrackingReliableProperty.value == value) return;
            _isRightHandTrackingReliableProperty.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public bool isLeftHandTrackingReliable {
        get {
            return _isLeftHandTrackingReliableProperty.value;
        }
        set {
            if (_isLeftHandTrackingReliableProperty.value == value) return;
            _isLeftHandTrackingReliableProperty.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public bool isHandTrackingActive {
        get {
            return _isHandTrackingActiveProperty.value;
        }
        set {
            if (_isHandTrackingActiveProperty.value == value) return;
            _isHandTrackingActiveProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public enum PropertyID : uint {
        IsHandTrackingActive = 1,
        IsRightHandTrackingReliable = 2,
        IsLeftHandTrackingReliable = 3,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _isHandTrackingActiveProperty;
    
    private UnreliableProperty<bool> _isRightHandTrackingReliableProperty;
    
    private UnreliableProperty<bool> _isLeftHandTrackingReliableProperty;
    
    #endregion
    
    public HandSyncRealtimeModel() : base(null) {
        _isHandTrackingActiveProperty = new ReliableProperty<bool>(1, _isHandTrackingActive);
        _isRightHandTrackingReliableProperty = new UnreliableProperty<bool>(2, _isRightHandTrackingReliable);
        _isLeftHandTrackingReliableProperty = new UnreliableProperty<bool>(3, _isLeftHandTrackingReliable);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _isHandTrackingActiveProperty.UnsubscribeCallback();
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _isHandTrackingActiveProperty.WriteLength(context);
        length += _isRightHandTrackingReliableProperty.WriteLength(context);
        length += _isLeftHandTrackingReliableProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _isHandTrackingActiveProperty.Write(stream, context);
        writes |= _isRightHandTrackingReliableProperty.Write(stream, context);
        writes |= _isLeftHandTrackingReliableProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.IsHandTrackingActive: {
                    changed = _isHandTrackingActiveProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.IsRightHandTrackingReliable: {
                    changed = _isRightHandTrackingReliableProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.IsLeftHandTrackingReliable: {
                    changed = _isLeftHandTrackingReliableProperty.Read(stream, context);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _isHandTrackingActive = isHandTrackingActive;
        _isRightHandTrackingReliable = isRightHandTrackingReliable;
        _isLeftHandTrackingReliable = isLeftHandTrackingReliable;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
